{"version":3,"sources":["../../src/components/propertyBrowser.jsx","../../src/CssBuilder.jsx","App.js","index.js"],"names":["PropertyBrowser","useState","className","CSSBuilder","onPropertyValueChange","value","controlindex","rowindex","allProps","setAllProps","fireOnChange","styles","resStyle","inline","row","Object","styleName","match","group1","styleValue","c","onChange","style","width","display","minHeight","key","propi","prop","e","event","index","onPropertyChange","templates","f","JSON","t","ti","flex","gridTemplateColumns","padding","ci","control","res","React.createElement","o","oi","type","id","name","checked","for","border","min","max","getControl","onClick","App","val","setVal","v","stringify","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6245778.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport { useState, useEffect, Fragment } from 'react'\r\n\r\nimport templates from '../definitions.json'\r\n// https://www.w3schools.com/cssref/\r\n// import './property_browser.scss'\r\n\r\nexport const PropertyBrowser = ({ selected, onChange, ...rest }) => {\r\n  const [allProps, setAllProps] = useState([])\r\n\r\n  return <div className='cb-modal'></div>\r\n}\r\n","import * as React from 'react'\r\nimport { useState, useEffect, Fragment } from 'react'\r\n// https://www.w3schools.com/cssref/\r\nimport templates from './definitions.json'\r\nimport { PropertyBrowser } from './components/propertyBrowser'\r\nimport './app.scss'\r\nimport './index.css'\r\n\r\nexport const CSSBuilder = ({ tags, onChange, inline, ...rest }) => {\r\n  const [allProps, setAllProps] = useState([])\r\n\r\n  const onRowAdd = () => {\r\n    allProps.push({})\r\n    setAllProps(JSON.parse(JSON.stringify(allProps)))\r\n  }\r\n\r\n  const getControl = (control, controlindex, rowindex) => {\r\n    const res = [<div>{control.label}</div>]\r\n    switch (control.type) {\r\n      case 'select':\r\n        res.push(\r\n          <div className='cb-floating-label-content'>\r\n            <select\r\n              className='cb-floating-select'\r\n              value={allProps[rowindex].controls[controlindex].value}\r\n              onChange={(e) =>\r\n                onPropertyValueChange(e.target.value, controlindex, rowindex)\r\n              }\r\n              style={{ width: '100%' }}\r\n            >\r\n              {control.options.map((o, oi) => {\r\n                return (\r\n                  <option value={o.value} key={oi}>\r\n                    {o.name}\r\n                  </option>\r\n                )\r\n              })}\r\n            </select>\r\n          </div>\r\n        )\r\n        break\r\n      case 'radio':\r\n        res.push(\r\n          <div className='radio-toolbar'>\r\n            {control.options.map((o, oi) => {\r\n              return (\r\n                <Fragment key={oi}>\r\n                  <input\r\n                    type='radio'\r\n                    id={`radio-${o.name}`}\r\n                    name={`radio-${o.name}`}\r\n                    value={o.value}\r\n                    checked={\r\n                      o.value ===\r\n                      allProps[rowindex].controls[controlindex].value\r\n                    }\r\n                  />\r\n                  <label for='radioBanana'>{o.name}</label>\r\n                </Fragment>\r\n              )\r\n            })}\r\n          </div>\r\n        )\r\n        break\r\n\r\n      case 'color':\r\n        res.push(\r\n          <input\r\n            type='color'\r\n            id='favcolor'\r\n            name='favcolor'\r\n            value={allProps[rowindex].controls[controlindex].value}\r\n            style={{\r\n              padding: '0px',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}\r\n            onChange={(e) =>\r\n              onPropertyValueChange(\r\n                e.target.value,\r\n                // hexToRgb(e.target.value),\r\n                controlindex,\r\n                rowindex\r\n              )\r\n            }\r\n          />\r\n        )\r\n        break\r\n      case 'number':\r\n        return (\r\n          <input\r\n            type='number'\r\n            id='favcolor'\r\n            name='favcolor'\r\n            value={allProps[rowindex].controls[controlindex].value}\r\n            onChange={(e) =>\r\n              onPropertyValueChange(e.target.value, controlindex, rowindex)\r\n            }\r\n          />\r\n        )\r\n      case 'range':\r\n        res.push(\r\n          <input\r\n            type='range'\r\n            min={control.min || '1'}\r\n            max={control.max || '100'}\r\n            value={allProps[rowindex].controls[controlindex].value}\r\n            style={{ width: '100%' }}\r\n            onChange={(e) =>\r\n              onPropertyValueChange(\r\n                e.target.value * (control.multiplier || 1),\r\n                controlindex,\r\n                rowindex\r\n              )\r\n            }\r\n          />\r\n        )\r\n        break\r\n\r\n      case 'text':\r\n        return (\r\n          <input\r\n            type='text'\r\n            id='favcolor'\r\n            name='favcolor'\r\n            value={allProps[rowindex].controls[controlindex].value}\r\n            onChange={(e) =>\r\n              onPropertyValueChange(e.target.value, controlindex, rowindex)\r\n            }\r\n          />\r\n        )\r\n    }\r\n    return res\r\n  }\r\n  const onPropertyChange = (event, index) => {\r\n    allProps[index] = templates.filter((f) => {\r\n      return (\r\n        f.name === event.target.value || f.propertyName === event.target.value\r\n      )\r\n    })[0]\r\n\r\n    allProps[index].controls.forEach((c) => {\r\n      c.value = c.default ? c.default : ''\r\n    })\r\n\r\n    setAllProps(JSON.parse(JSON.stringify(allProps)))\r\n    fireOnChange(allProps)\r\n  }\r\n  const onPropertyValueChange = (value, controlindex, rowindex) => {\r\n    allProps[rowindex].controls[controlindex].value = value\r\n    setAllProps(allProps)\r\n    fireOnChange(allProps)\r\n  }\r\n\r\n  const camelCase = (input) => {\r\n    return input.toLowerCase().replace(/-(.)/g, function (match, group1) {\r\n      return group1.toUpperCase()\r\n    })\r\n  }\r\n\r\n  const fireOnChange = (styles) => {\r\n    let resStyle = inline ? {} : ''\r\n    styles.forEach((row) => {\r\n      if (Object.keys(row).length) {\r\n        const styleName = inline\r\n          ? camelCase(row.propertyName)\r\n          : row.propertyName\r\n        let styleValue = row.valuetemplate || '${0}'\r\n        row.controls.forEach((c, ci) => {\r\n          styleValue = styleValue.replace(`{${ci}}`, c.value || '')\r\n        })\r\n\r\n        if (inline) {\r\n          //   styleValue = `'${styleValue}'`\r\n          resStyle[styleName] = styleValue\r\n        } else {\r\n          resStyle = `${resStyle}${styleName}:${styleValue};}`\r\n        }\r\n      }\r\n    })\r\n    if (onChange) {\r\n      onChange(resStyle)\r\n    }\r\n  }\r\n\r\n  function hexToRgb(hex) {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n    return result\r\n      ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(\r\n          result[3],\r\n          16\r\n        )}`\r\n      : null\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <form style={{ width: '100%' }}>\r\n        {allProps.map((prop, propi) => {\r\n          return (\r\n            <div style={{ display: 'flex', minHeight: '50px' }} key={propi}>\r\n              <div style={{ width: '20%' }}>\r\n                <label>\r\n                  Property Name\r\n                  <select\r\n                    value={prop.value}\r\n                    onChange={(e) => {\r\n                      onPropertyChange(e, propi)\r\n                    }}\r\n                  >\r\n                    <option value=''></option>\r\n                    {templates.map((t, ti) => {\r\n                      return (\r\n                        <option value={t.name || t.propertyName} key={ti}>\r\n                          {t.display}\r\n                        </option>\r\n                      )\r\n                    })}\r\n                  </select>\r\n                </label>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  flex: 1,\r\n                  display: 'grid',\r\n                  gridTemplateColumns: '1fr 1fr',\r\n                  padding: '8px'\r\n                }}\r\n              >\r\n                {prop.controls && prop.controls.length ? (\r\n                  <Fragment>\r\n                    {prop.controls.map((c, ci) => {\r\n                      return (\r\n                        <div style={{ flex: 1 }} key={ci}>\r\n                          <div style={{ display: 'flex' }}>\r\n                            {getControl(c, ci, propi)}{' '}\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    })}\r\n                  </Fragment>\r\n                ) : (\r\n                  <Fragment>Select a property type first</Fragment>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n        <div>\r\n          <input type='button' value='Add' onClick={() => onRowAdd()} />\r\n        </div>\r\n      </form>\r\n      <PropertyBrowser />\r\n    </Fragment>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\n\nimport { CSSBuilder } from 'css-builder'\n// import 'css-builder/dist/index.css'\n\n\nconst App = () => {\n  const [val, setVal] = useState({border:'1px'});\n\n  return <div className=\"wrapper\">\n    <div className=\"config\"><CSSBuilder inline onChange={(v) => {setVal(v)}}/></div>\n  <div className=\"live-demo\">\n  <pre>\n        {JSON.stringify(val, null, 2)}\n      </pre>\n    <fieldset className=\"outer\">\n      <legend>Outer box</legend>\n      <div style={{flex:1, height: \"200px\",width: \"400px\", display: \"flex\"}}>\n    <fieldset className=\"target\" style={val}>\n      <legend>Target Box</legend>\n    <fieldset className=\"inner\">\n      <legend>Inner Box</legend>\n      </fieldset>\n      </fieldset>\n      </div>\n      </fieldset>\n    </div>\n    \n    \n      </div>\n    \n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}